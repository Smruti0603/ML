# -*- coding: utf-8 -*-
"""B21BB007_Lab 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t-ktO5FQvCkZd9QbgmG9Uwo2eQXBTO4E

QUE 1)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns

"""Preprocessing of data """

data = pd.read_csv("diabetes.csv")

#Removing the Outliers using IQR
colum = np.array(data.columns)
new_data = pd.DataFrame(columns = data.columns)

for i in colum:
 
  percentile25 = data[i].quantile(0.25)
  percentile75 = data[i].quantile(0.75)
  iqr = percentile75 - percentile25
  upperlimit = percentile75 + 1.5*iqr
  lowerlimit = percentile25 - 1.5*iqr

  new_data[i] = data[(data[i] < upperlimit) & (data[i] > lowerlimit)][i] 


colum1 = np.array(new_data.columns)


for j in colum1:
  
  plt.figure()
  plt.subplot(2,2,1)
  sns.distplot(new_data[j])


  plt.subplot(2,2,2)
  sns.boxplot(new_data[j])

# normalizing feature @ 1) Standard Scaling
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X = new_data.iloc[:,:8 ]
scaler.fit(X)
datascaled = scaler.transform(X)

df_data = pd.DataFrame(datascaled)
df_data

df_data.columns = [ "Pregnancies" ,	"Glucose" ,	"BloodPressure"	,"SkinThickness",	"Insulin"	,"BMI",	"DiabetesPedigreeFunction",	"Age" ,]
df_data["Outcome"] = new_data["Outcome"]
df_data = df_data.dropna(axis=0)
df_data

x= np.array(df_data["Glucose"]).reshape(-1 ,1)
y= np.array(df_data["Age"]).reshape(-1 ,1)

from sklearn.model_selection import train_test_split

x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.3 )

#performing linear regression
from sklearn.linear_model import LinearRegression 

lr = LinearRegression()

lr.fit(x_train , y_train)

#normalizing feature @ 2)method Minmax scaling 
from sklearn.preprocessing import MinMaxScaler

norm = MinMaxScaler().fit(x_train)
X_train_norm = norm.transform(x_train)
X_test_norm = norm.transform(x_test)

X_train_norm

from sklearn.metrics import mean_squared_error, r2_score

#Rms error of Minmax featuring
y_pred = lr.predict(X_test_norm) 
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
r2 = r2_score(y_test, y_pred)

print("Performance on Test Set -->")
print('RMSE is ', rmse)
print('R2 score is ', r2)

#Rms error of Standard scaling 
y_pred = lr.predict(x_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
r2 = r2_score(y_test, y_pred)

print("Performance on Test Set -->")
print('RMSE is ', rmse)
print('R2 score is ', r2)

x= np.array(df_data["Glucose"]).reshape(-1 ,1)
y= np.array(df_data["Age"]).reshape(-1 ,1)

from sklearn.model_selection import train_test_split
x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.3 )


y_pred = lr.predict(x_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
r2 = r2_score(y_test, y_pred)

print("Performance on Test Set -->")
print('RMSE is ', rmse)
print('R2 score is ', r2)

x= np.array(df_data["Glucose"]).reshape(-1 ,1)
y= np.array(df_data["Age"]).reshape(-1 ,1)

from sklearn.model_selection import train_test_split

x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.5 )


y_pred = lr.predict(x_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
r2 = r2_score(y_test, y_pred)

print("Performance on Test Set -->")
print('RMSE is ', rmse)
print('R2 score is ', r2)

x= np.array(df_data["Glucose"]).reshape(-1 ,1)
y= np.array(df_data["Age"]).reshape(-1 ,1)

from sklearn.model_selection import train_test_split

x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.2 )


y_pred = lr.predict(x_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
r2 = r2_score(y_test, y_pred)

print("Performance on Test Set -->")
print('RMSE is ', rmse)
print('R2 score is ', r2)

lr.fit(x_test , y_test)
plt.scatter(df_data["Glucose"] , df_data["Age"])

plt.xlabel("Glucose")
plt.ylabel("Age")
plt.plot(x_test , lr.predict(x_test) , color = "red")

plt.scatter(df_data["Glucose"] , df_data["Age"])
plt.xlabel("Glucose")
plt.ylabel("Age")
plt.plot(x_train , lr.predict(x_train) , color = "red")

x= np.array(df_data["BMI"]).reshape(-1 ,1)
y= np.array(df_data["Age"]).reshape(-1 ,1)

from sklearn.model_selection import train_test_split

x_train_ ,x_test_ , y_train_ , y_test_  = train_test_split( x , y , test_size = 0.3 )

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train_ , y_train_)

plt.scatter(df_data["BMI"] , df_data["Age"])
plt.xlabel("BMI")
plt.ylabel("Age")
plt.plot(x_train_ , lr.predict(x_train_) , color = "red")

lr.fit(x_test_ , y_test_)
plt.scatter(df_data["BMI"] , df_data["Age"])
plt.xlabel("BMI")
plt.ylabel("Age")
plt.plot(x_test_ , lr.predict(x_test_) , color = "red")

"""Que 1 part B)
implementing linear Regression using numpy from scratch
"""

class LineR():
  def __init__(self):
    self.m = None
    self.b = None

  def fit(self , x_train , y_train) :

    num =0
    den =0

    for i in range(len(x_train)):
      num = num + ((x_train[i] - x_train.mean())*(y_train[i] - y_train.mean()))
      den = den + ((x_train[i] - x_train.mean())*(x_train[i] - x_train.mean()))

    self.m = num/den
    self.b = y_train.mean() - (self.m * x_train.mean())
    print(self.m)
    print(self.b)       
    
  def predict(self,x_test):
        
    print(x_test)
        
    return self.m * x_test + self.b

x= df_data["Glucose"].values
y= df_data["Age"].values

from sklearn.model_selection import train_test_split

x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.3 )

x

lrw = LineR()

lrw.fit(x_train,y_train)

print(lrw.predict(x_test))

y_pred = lrw.predict(x_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))


print("Performance on Test Set -->")
print('RMSE is ', rmse)