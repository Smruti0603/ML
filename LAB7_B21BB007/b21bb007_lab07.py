# -*- coding: utf-8 -*-
"""B21BB007_Lab07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfTAlCS_c7CDhYg4aXxwQNEN-F1Djs8E

**Que 1**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
sns.set()

from sklearn import decomposition
from sklearn import datasets

from sklearn.model_selection import train_test_split

data = pd.read_csv("iris.data")
data

t = pd.read_csv("iris.names", sep="\t")
t

data.columns = [ "sepal length" ,"sepal width"   ,'petal length' , "petal width" ,"class"]

data

"""*Pre Processing*"""

data = data.dropna(axis=0)

from sklearn.preprocessing import StandardScaler
standardscaler = StandardScaler()
standardscaler.fit(data.iloc[: ,0:4])
x = standardscaler.transform(data.iloc[: ,0:4])

x

data1 = pd.DataFrame(x , columns=["sepal length" ,"sepal width" ,'petal length',"petal width" ])
data1

X = x 
y = data.iloc[: , -1]

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

pca = decomposition.PCA(n_components=3)
pca.fit(x_train)

transformed_X = pca.transform(x_train)

pca.components_.shape

X.shape

pca.explained_variance_ratio_

"""**Que 2**"""

from sklearn import tree

clf = tree.DecisionTreeClassifier()
clf = clf.fit(x_train, y_train)

from sklearn.metrics import accuracy_score


y_pred = clf.predict(x_test)

acc = accuracy_score(y_pred, y_test)
acc

"""**Que 4**"""

from sklearn import tree

clf = tree.DecisionTreeClassifier()
clf = clf.fit(transformed_X, y_train)

from sklearn.metrics import accuracy_score


x_test_transformed = pca.transform(x_test)
y_pred = clf.predict(x_test_transformed)

acc = accuracy_score(y_pred, y_test)
acc

"""**Que 5**"""

pca = decomposition.PCA(n_components= 2)
pca.fit(x_train)

transformed_X_ = pca.transform(x_train)

from sklearn import tree

clf = tree.DecisionTreeClassifier()
clf = clf.fit(transformed_X_, y_train)

from sklearn.metrics import accuracy_score


x_test_transformed = pca.transform(x_test)
y_pred = clf.predict(x_test_transformed)

acc = accuracy_score(y_pred, y_test)
acc